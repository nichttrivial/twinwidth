<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="5456"><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="0.0183%" y="181" width="0.0367%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.2683%" y="191.50"></text></g><g><title>twinwidth`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0550%" y="181" width="0.0183%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.3050%" y="191.50"></text></g><g><title>twinwidth`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="0.0733%" y="181" width="0.0183%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.3233%" y="191.50"></text></g><g><title>twinwidth`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.0916%" y="181" width="0.0183%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="0.3416%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.11%)</title><rect x="76.4113%" y="165" width="0.1100%" height="15" fill="rgb(208,68,35)" fg:x="4169" fg:w="6"/><text x="76.6613%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.02%)</title><rect x="76.5213%" y="165" width="0.0183%" height="15" fill="rgb(232,128,0)" fg:x="4175" fg:w="1"/><text x="76.7713%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.24%)</title><rect x="76.7412%" y="149" width="0.2383%" height="15" fill="rgb(207,160,47)" fg:x="4187" fg:w="13"/><text x="76.9912%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.18%)</title><rect x="76.7962%" y="133" width="0.1833%" height="15" fill="rgb(228,23,34)" fg:x="4190" fg:w="10"/><text x="77.0462%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.48%)</title><rect x="76.5396%" y="165" width="0.4765%" height="15" fill="rgb(218,30,26)" fg:x="4176" fg:w="26"/><text x="76.7896%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.04%)</title><rect x="76.9795%" y="149" width="0.0367%" height="15" fill="rgb(220,122,19)" fg:x="4200" fg:w="2"/><text x="77.2295%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.09%)</title><rect x="77.9326%" y="133" width="0.0916%" height="15" fill="rgb(250,228,42)" fg:x="4252" fg:w="5"/><text x="78.1826%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (64 samples, 1.17%)</title><rect x="77.0161%" y="165" width="1.1730%" height="15" fill="rgb(240,193,28)" fg:x="4202" fg:w="64"/><text x="77.2661%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (45 samples, 0.82%)</title><rect x="77.3644%" y="149" width="0.8248%" height="15" fill="rgb(216,20,37)" fg:x="4221" fg:w="45"/><text x="77.6144%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.16%)</title><rect x="78.0242%" y="133" width="0.1650%" height="15" fill="rgb(206,188,39)" fg:x="4257" fg:w="9"/><text x="78.2742%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.04%)</title><rect x="78.1891%" y="165" width="0.0367%" height="15" fill="rgb(217,207,13)" fg:x="4266" fg:w="2"/><text x="78.4391%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="78.2258%" y="165" width="0.0183%" height="15" fill="rgb(231,73,38)" fg:x="4268" fg:w="1"/><text x="78.4758%" y="175.50"></text></g><g><title>twinwidth`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="78.2441%" y="165" width="0.0183%" height="15" fill="rgb(225,20,46)" fg:x="4269" fg:w="1"/><text x="78.4941%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.07%)</title><rect x="78.6290%" y="85" width="0.0733%" height="15" fill="rgb(210,31,41)" fg:x="4290" fg:w="4"/><text x="78.8790%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (27 samples, 0.49%)</title><rect x="78.3541%" y="149" width="0.4949%" height="15" fill="rgb(221,200,47)" fg:x="4275" fg:w="27"/><text x="78.6041%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (26 samples, 0.48%)</title><rect x="78.3724%" y="133" width="0.4765%" height="15" fill="rgb(226,26,5)" fg:x="4276" fg:w="26"/><text x="78.6224%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.46%)</title><rect x="78.3908%" y="117" width="0.4582%" height="15" fill="rgb(249,33,26)" fg:x="4277" fg:w="25"/><text x="78.6408%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.42%)</title><rect x="78.4274%" y="101" width="0.4216%" height="15" fill="rgb(235,183,28)" fg:x="4279" fg:w="23"/><text x="78.6774%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.15%)</title><rect x="78.7023%" y="85" width="0.1466%" height="15" fill="rgb(221,5,38)" fg:x="4294" fg:w="8"/><text x="78.9523%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="78.8306%" y="69" width="0.0183%" height="15" fill="rgb(247,18,42)" fg:x="4301" fg:w="1"/><text x="79.0806%" y="79.50"></text></g><g><title>twinwidth`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 0.62%)</title><rect x="78.2625%" y="165" width="0.6232%" height="15" fill="rgb(241,131,45)" fg:x="4270" fg:w="34"/><text x="78.5125%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="78.8490%" y="149" width="0.0367%" height="15" fill="rgb(249,31,29)" fg:x="4302" fg:w="2"/><text x="79.0990%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.09%)</title><rect x="78.9956%" y="149" width="0.0916%" height="15" fill="rgb(225,111,53)" fg:x="4310" fg:w="5"/><text x="79.2456%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.35%)</title><rect x="79.1422%" y="133" width="0.3482%" height="15" fill="rgb(238,160,17)" fg:x="4318" fg:w="19"/><text x="79.3922%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.31%)</title><rect x="79.1789%" y="117" width="0.3116%" height="15" fill="rgb(214,148,48)" fg:x="4320" fg:w="17"/><text x="79.4289%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.42%)</title><rect x="79.0872%" y="149" width="0.4216%" height="15" fill="rgb(232,36,49)" fg:x="4315" fg:w="23"/><text x="79.3372%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="79.4905%" y="133" width="0.0183%" height="15" fill="rgb(209,103,24)" fg:x="4337" fg:w="1"/><text x="79.7405%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (24 samples, 0.44%)</title><rect x="80.6818%" y="117" width="0.4399%" height="15" fill="rgb(229,88,8)" fg:x="4402" fg:w="24"/><text x="80.9318%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (128 samples, 2.35%)</title><rect x="79.5088%" y="149" width="2.3460%" height="15" fill="rgb(213,181,19)" fg:x="4338" fg:w="128"/><text x="79.7588%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (109 samples, 2.00%)</title><rect x="79.8570%" y="133" width="1.9978%" height="15" fill="rgb(254,191,54)" fg:x="4357" fg:w="109"/><text x="80.1070%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (40 samples, 0.73%)</title><rect x="81.1217%" y="117" width="0.7331%" height="15" fill="rgb(241,83,37)" fg:x="4426" fg:w="40"/><text x="81.3717%" y="127.50"></text></g><g><title>twinwidth`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (164 samples, 3.01%)</title><rect x="78.8856%" y="165" width="3.0059%" height="15" fill="rgb(233,36,39)" fg:x="4304" fg:w="164"/><text x="79.1356%" y="175.50">twi..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.04%)</title><rect x="81.8548%" y="149" width="0.0367%" height="15" fill="rgb(226,3,54)" fg:x="4466" fg:w="2"/><text x="82.1048%" y="159.50"></text></g><g><title>twinwidth`&lt;itertools::adaptors::Tuple2Combination&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.11%)</title><rect x="81.8915%" y="165" width="0.1100%" height="15" fill="rgb(245,192,40)" fg:x="4468" fg:w="6"/><text x="82.1415%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="81.9831%" y="149" width="0.0183%" height="15" fill="rgb(238,167,29)" fg:x="4473" fg:w="1"/><text x="82.2331%" y="159.50"></text></g><g><title>twinwidth`__rdl_alloc (1 samples, 0.02%)</title><rect x="82.0015%" y="165" width="0.0183%" height="15" fill="rgb(232,182,51)" fg:x="4474" fg:w="1"/><text x="82.2515%" y="175.50"></text></g><g><title>twinwidth`__rdl_dealloc (3 samples, 0.05%)</title><rect x="82.0198%" y="165" width="0.0550%" height="15" fill="rgb(231,60,39)" fg:x="4475" fg:w="3"/><text x="82.2698%" y="175.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.04%)</title><rect x="82.0748%" y="165" width="0.0367%" height="15" fill="rgb(208,69,12)" fg:x="4478" fg:w="2"/><text x="82.3248%" y="175.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (15 samples, 0.27%)</title><rect x="82.1114%" y="165" width="0.2749%" height="15" fill="rgb(235,93,37)" fg:x="4480" fg:w="15"/><text x="82.3614%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="83.4494%" y="149" width="0.0183%" height="15" fill="rgb(213,116,39)" fg:x="4553" fg:w="1"/><text x="83.6994%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="83.4677%" y="149" width="0.0367%" height="15" fill="rgb(222,207,29)" fg:x="4554" fg:w="2"/><text x="83.7177%" y="159.50"></text></g><g><title>twinwidth`DYLD-STUB$$malloc (2 samples, 0.04%)</title><rect x="83.5044%" y="149" width="0.0367%" height="15" fill="rgb(206,96,30)" fg:x="4556" fg:w="2"/><text x="83.7544%" y="159.50"></text></g><g><title>twinwidth`__rdl_alloc (2 samples, 0.04%)</title><rect x="83.5411%" y="149" width="0.0367%" height="15" fill="rgb(218,138,4)" fg:x="4558" fg:w="2"/><text x="83.7911%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="83.8893%" y="117" width="0.0183%" height="15" fill="rgb(250,191,14)" fg:x="4577" fg:w="1"/><text x="84.1393%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="84.1092%" y="101" width="0.0183%" height="15" fill="rgb(239,60,40)" fg:x="4589" fg:w="1"/><text x="84.3592%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="84.2559%" y="85" width="0.0367%" height="15" fill="rgb(206,27,48)" fg:x="4597" fg:w="2"/><text x="84.5059%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.16%)</title><rect x="85.2089%" y="69" width="0.1650%" height="15" fill="rgb(225,35,8)" fg:x="4649" fg:w="9"/><text x="85.4589%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (114 samples, 2.09%)</title><rect x="84.1276%" y="101" width="2.0894%" height="15" fill="rgb(250,213,24)" fg:x="4590" fg:w="114"/><text x="84.3776%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (105 samples, 1.92%)</title><rect x="84.2925%" y="85" width="1.9245%" height="15" fill="rgb(247,123,22)" fg:x="4599" fg:w="105"/><text x="84.5425%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (46 samples, 0.84%)</title><rect x="85.3739%" y="69" width="0.8431%" height="15" fill="rgb(231,138,38)" fg:x="4658" fg:w="46"/><text x="85.6239%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.26%)</title><rect x="85.9604%" y="53" width="0.2566%" height="15" fill="rgb(231,145,46)" fg:x="4690" fg:w="14"/><text x="86.2104%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (128 samples, 2.35%)</title><rect x="83.9076%" y="117" width="2.3460%" height="15" fill="rgb(251,118,11)" fg:x="4578" fg:w="128"/><text x="84.1576%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="86.2170%" y="101" width="0.0367%" height="15" fill="rgb(217,147,25)" fg:x="4704" fg:w="2"/><text x="86.4670%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (132 samples, 2.42%)</title><rect x="83.8526%" y="133" width="2.4194%" height="15" fill="rgb(247,81,37)" fg:x="4575" fg:w="132"/><text x="84.1026%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="86.2537%" y="117" width="0.0183%" height="15" fill="rgb(209,12,38)" fg:x="4706" fg:w="1"/><text x="86.5037%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (4 samples, 0.07%)</title><rect x="86.2720%" y="133" width="0.0733%" height="15" fill="rgb(227,1,9)" fg:x="4707" fg:w="4"/><text x="86.5220%" y="143.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (221 samples, 4.05%)</title><rect x="82.3864%" y="165" width="4.0506%" height="15" fill="rgb(248,47,43)" fg:x="4495" fg:w="221"/><text x="82.6364%" y="175.50">twin..</text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (156 samples, 2.86%)</title><rect x="83.5777%" y="149" width="2.8592%" height="15" fill="rgb(221,10,30)" fg:x="4560" fg:w="156"/><text x="83.8277%" y="159.50">tw..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (5 samples, 0.09%)</title><rect x="86.3453%" y="133" width="0.0916%" height="15" fill="rgb(210,229,1)" fg:x="4711" fg:w="5"/><text x="86.5953%" y="143.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.02%)</title><rect x="86.4370%" y="165" width="0.0183%" height="15" fill="rgb(222,148,37)" fg:x="4716" fg:w="1"/><text x="86.6870%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="86.6386%" y="117" width="0.0183%" height="15" fill="rgb(234,67,33)" fg:x="4727" fg:w="1"/><text x="86.8886%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (18 samples, 0.33%)</title><rect x="86.6019%" y="149" width="0.3299%" height="15" fill="rgb(247,98,35)" fg:x="4725" fg:w="18"/><text x="86.8519%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (18 samples, 0.33%)</title><rect x="86.6019%" y="133" width="0.3299%" height="15" fill="rgb(247,138,52)" fg:x="4725" fg:w="18"/><text x="86.8519%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.27%)</title><rect x="86.6569%" y="117" width="0.2749%" height="15" fill="rgb(213,79,30)" fg:x="4728" fg:w="15"/><text x="86.9069%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.22%)</title><rect x="86.7119%" y="101" width="0.2199%" height="15" fill="rgb(246,177,23)" fg:x="4731" fg:w="12"/><text x="86.9619%" y="111.50"></text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (27 samples, 0.49%)</title><rect x="86.4553%" y="165" width="0.4949%" height="15" fill="rgb(230,62,27)" fg:x="4717" fg:w="27"/><text x="86.7053%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="86.9318%" y="149" width="0.0183%" height="15" fill="rgb(216,154,8)" fg:x="4743" fg:w="1"/><text x="87.1818%" y="159.50"></text></g><g><title>twinwidth`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (15 samples, 0.27%)</title><rect x="86.9685%" y="117" width="0.2749%" height="15" fill="rgb(244,35,45)" fg:x="4745" fg:w="15"/><text x="87.2185%" y="127.50"></text></g><g><title>twinwidth`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (15 samples, 0.27%)</title><rect x="86.9685%" y="101" width="0.2749%" height="15" fill="rgb(251,115,12)" fg:x="4745" fg:w="15"/><text x="87.2185%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`write (15 samples, 0.27%)</title><rect x="86.9685%" y="85" width="0.2749%" height="15" fill="rgb(240,54,50)" fg:x="4745" fg:w="15"/><text x="87.2185%" y="95.50"></text></g><g><title>twinwidth`std::io::stdio::_print (18 samples, 0.33%)</title><rect x="86.9501%" y="165" width="0.3299%" height="15" fill="rgb(233,84,52)" fg:x="4744" fg:w="18"/><text x="87.2001%" y="175.50"></text></g><g><title>twinwidth`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (18 samples, 0.33%)</title><rect x="86.9501%" y="149" width="0.3299%" height="15" fill="rgb(207,117,47)" fg:x="4744" fg:w="18"/><text x="87.2001%" y="159.50"></text></g><g><title>twinwidth`core::fmt::write (18 samples, 0.33%)</title><rect x="86.9501%" y="133" width="0.3299%" height="15" fill="rgb(249,43,39)" fg:x="4744" fg:w="18"/><text x="87.2001%" y="143.50"></text></g><g><title>twinwidth`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (2 samples, 0.04%)</title><rect x="87.2434%" y="117" width="0.0367%" height="15" fill="rgb(209,38,44)" fg:x="4760" fg:w="2"/><text x="87.4934%" y="127.50"></text></g><g><title>twinwidth`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="87.2617%" y="101" width="0.0183%" height="15" fill="rgb(236,212,23)" fg:x="4761" fg:w="1"/><text x="87.5117%" y="111.50"></text></g><g><title>twinwidth`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="87.2617%" y="85" width="0.0183%" height="15" fill="rgb(242,79,21)" fg:x="4761" fg:w="1"/><text x="87.5117%" y="95.50"></text></g><g><title>twinwidth`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="87.2617%" y="69" width="0.0183%" height="15" fill="rgb(211,96,35)" fg:x="4761" fg:w="1"/><text x="87.5117%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.04%)</title><rect x="88.6364%" y="133" width="0.0367%" height="15" fill="rgb(253,215,40)" fg:x="4836" fg:w="2"/><text x="88.8864%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.04%)</title><rect x="89.4428%" y="117" width="0.0367%" height="15" fill="rgb(211,81,21)" fg:x="4880" fg:w="2"/><text x="89.6928%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.18%)</title><rect x="89.4795%" y="117" width="0.1833%" height="15" fill="rgb(208,190,38)" fg:x="4882" fg:w="10"/><text x="89.7295%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.13%)</title><rect x="89.5345%" y="101" width="0.1283%" height="15" fill="rgb(235,213,38)" fg:x="4885" fg:w="7"/><text x="89.7845%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.11%)</title><rect x="89.5528%" y="85" width="0.1100%" height="15" fill="rgb(237,122,38)" fg:x="4886" fg:w="6"/><text x="89.8028%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.13%)</title><rect x="90.0293%" y="85" width="0.1283%" height="15" fill="rgb(244,218,35)" fg:x="4912" fg:w="7"/><text x="90.2793%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (28 samples, 0.51%)</title><rect x="89.6628%" y="117" width="0.5132%" height="15" fill="rgb(240,68,47)" fg:x="4892" fg:w="28"/><text x="89.9128%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.40%)</title><rect x="89.7727%" y="101" width="0.4032%" height="15" fill="rgb(210,16,53)" fg:x="4898" fg:w="22"/><text x="90.0227%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="90.1576%" y="85" width="0.0183%" height="15" fill="rgb(235,124,12)" fg:x="4919" fg:w="1"/><text x="90.4076%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="90.2309%" y="101" width="0.0183%" height="15" fill="rgb(224,169,11)" fg:x="4923" fg:w="1"/><text x="90.4809%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.05%)</title><rect x="90.3409%" y="85" width="0.0550%" height="15" fill="rgb(250,166,2)" fg:x="4929" fg:w="3"/><text x="90.5909%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.05%)</title><rect x="90.9274%" y="53" width="0.0550%" height="15" fill="rgb(242,216,29)" fg:x="4961" fg:w="3"/><text x="91.1774%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (56 samples, 1.03%)</title><rect x="90.2493%" y="101" width="1.0264%" height="15" fill="rgb(230,116,27)" fg:x="4924" fg:w="56"/><text x="90.4993%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (48 samples, 0.88%)</title><rect x="90.3959%" y="85" width="0.8798%" height="15" fill="rgb(228,99,48)" fg:x="4932" fg:w="48"/><text x="90.6459%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (45 samples, 0.82%)</title><rect x="90.4509%" y="69" width="0.8248%" height="15" fill="rgb(253,11,6)" fg:x="4935" fg:w="45"/><text x="90.7009%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.29%)</title><rect x="90.9824%" y="53" width="0.2933%" height="15" fill="rgb(247,143,39)" fg:x="4964" fg:w="16"/><text x="91.2324%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.04%)</title><rect x="91.2390%" y="37" width="0.0367%" height="15" fill="rgb(236,97,10)" fg:x="4978" fg:w="2"/><text x="91.4890%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc (62 samples, 1.14%)</title><rect x="90.1760%" y="117" width="1.1364%" height="15" fill="rgb(233,208,19)" fg:x="4920" fg:w="62"/><text x="90.4260%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="91.2757%" y="101" width="0.0367%" height="15" fill="rgb(216,164,2)" fg:x="4980" fg:w="2"/><text x="91.5257%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="91.3123%" y="117" width="0.0367%" height="15" fill="rgb(220,129,5)" fg:x="4982" fg:w="2"/><text x="91.5623%" y="127.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (195 samples, 3.57%)</title><rect x="87.8116%" y="149" width="3.5740%" height="15" fill="rgb(242,17,10)" fg:x="4791" fg:w="195"/><text x="88.0616%" y="159.50">twin..</text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (148 samples, 2.71%)</title><rect x="88.6730%" y="133" width="2.7126%" height="15" fill="rgb(242,107,0)" fg:x="4838" fg:w="148"/><text x="88.9230%" y="143.50">tw..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="91.3490%" y="117" width="0.0367%" height="15" fill="rgb(251,28,31)" fg:x="4984" fg:w="2"/><text x="91.5990%" y="127.50"></text></g><g><title>twinwidth`twinwidth::graph::Graph::add_node (225 samples, 4.12%)</title><rect x="87.2801%" y="165" width="4.1239%" height="15" fill="rgb(233,223,10)" fg:x="4762" fg:w="225"/><text x="87.5301%" y="175.50">twin..</text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="91.3856%" y="149" width="0.0183%" height="15" fill="rgb(215,21,27)" fg:x="4986" fg:w="1"/><text x="91.6356%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.11%)</title><rect x="92.5953%" y="149" width="0.1100%" height="15" fill="rgb(232,23,21)" fg:x="5052" fg:w="6"/><text x="92.8453%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (25 samples, 0.46%)</title><rect x="92.9252%" y="133" width="0.4582%" height="15" fill="rgb(244,5,23)" fg:x="5070" fg:w="25"/><text x="93.1752%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (25 samples, 0.46%)</title><rect x="92.9252%" y="117" width="0.4582%" height="15" fill="rgb(226,81,46)" fg:x="5070" fg:w="25"/><text x="93.1752%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.70%)</title><rect x="92.7053%" y="149" width="0.6965%" height="15" fill="rgb(247,70,30)" fg:x="5058" fg:w="38"/><text x="92.9553%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="93.3834%" y="133" width="0.0183%" height="15" fill="rgb(212,68,19)" fg:x="5095" fg:w="1"/><text x="93.6334%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.27%)</title><rect x="94.3548%" y="117" width="0.2749%" height="15" fill="rgb(240,187,13)" fg:x="5148" fg:w="15"/><text x="94.6048%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (70 samples, 1.28%)</title><rect x="93.4018%" y="149" width="1.2830%" height="15" fill="rgb(223,113,26)" fg:x="5096" fg:w="70"/><text x="93.6518%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (36 samples, 0.66%)</title><rect x="94.0249%" y="133" width="0.6598%" height="15" fill="rgb(206,192,2)" fg:x="5130" fg:w="36"/><text x="94.2749%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.05%)</title><rect x="94.6298%" y="117" width="0.0550%" height="15" fill="rgb(241,108,4)" fg:x="5163" fg:w="3"/><text x="94.8798%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.04%)</title><rect x="94.6848%" y="149" width="0.0367%" height="15" fill="rgb(247,173,49)" fg:x="5166" fg:w="2"/><text x="94.9348%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="94.7214%" y="149" width="0.0183%" height="15" fill="rgb(224,114,35)" fg:x="5168" fg:w="1"/><text x="94.9714%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.07%)</title><rect x="94.7397%" y="149" width="0.0733%" height="15" fill="rgb(245,159,27)" fg:x="5169" fg:w="4"/><text x="94.9897%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.09%)</title><rect x="94.8130%" y="149" width="0.0916%" height="15" fill="rgb(245,172,44)" fg:x="5173" fg:w="5"/><text x="95.0630%" y="159.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.04%)</title><rect x="95.0880%" y="133" width="0.0367%" height="15" fill="rgb(236,23,11)" fg:x="5188" fg:w="2"/><text x="95.3380%" y="143.50"></text></g><g><title>twinwidth`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 0.46%)</title><rect x="94.9047%" y="149" width="0.4582%" height="15" fill="rgb(205,117,38)" fg:x="5178" fg:w="25"/><text x="95.1547%" y="159.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13 samples, 0.24%)</title><rect x="95.1246%" y="133" width="0.2383%" height="15" fill="rgb(237,72,25)" fg:x="5190" fg:w="13"/><text x="95.3746%" y="143.50"></text></g><g><title>twinwidth`__rdl_alloc (1 samples, 0.02%)</title><rect x="95.3629%" y="133" width="0.0183%" height="15" fill="rgb(244,70,9)" fg:x="5203" fg:w="1"/><text x="95.6129%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="95.5462%" y="85" width="0.0183%" height="15" fill="rgb(217,125,39)" fg:x="5213" fg:w="1"/><text x="95.7962%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="95.6195%" y="69" width="0.0183%" height="15" fill="rgb(235,36,10)" fg:x="5217" fg:w="1"/><text x="95.8695%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.05%)</title><rect x="95.8211%" y="53" width="0.0550%" height="15" fill="rgb(251,123,47)" fg:x="5228" fg:w="3"/><text x="96.0711%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (35 samples, 0.64%)</title><rect x="95.5095%" y="101" width="0.6415%" height="15" fill="rgb(221,13,13)" fg:x="5211" fg:w="35"/><text x="95.7595%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.59%)</title><rect x="95.5645%" y="85" width="0.5865%" height="15" fill="rgb(238,131,9)" fg:x="5214" fg:w="32"/><text x="95.8145%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (28 samples, 0.51%)</title><rect x="95.6378%" y="69" width="0.5132%" height="15" fill="rgb(211,50,8)" fg:x="5218" fg:w="28"/><text x="95.8878%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.27%)</title><rect x="95.8761%" y="53" width="0.2749%" height="15" fill="rgb(245,182,24)" fg:x="5231" fg:w="15"/><text x="96.1261%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.09%)</title><rect x="96.0594%" y="37" width="0.0916%" height="15" fill="rgb(242,14,37)" fg:x="5241" fg:w="5"/><text x="96.3094%" y="47.50"></text></g><g><title>twinwidth`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (44 samples, 0.81%)</title><rect x="95.3629%" y="149" width="0.8065%" height="15" fill="rgb(246,228,12)" fg:x="5203" fg:w="44"/><text x="95.6129%" y="159.50"></text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (43 samples, 0.79%)</title><rect x="95.3812%" y="133" width="0.7881%" height="15" fill="rgb(213,55,15)" fg:x="5204" fg:w="43"/><text x="95.6312%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (36 samples, 0.66%)</title><rect x="95.5095%" y="117" width="0.6598%" height="15" fill="rgb(209,9,3)" fg:x="5211" fg:w="36"/><text x="95.7595%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="96.1510%" y="101" width="0.0183%" height="15" fill="rgb(230,59,30)" fg:x="5246" fg:w="1"/><text x="96.4010%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.05%)</title><rect x="96.4443%" y="101" width="0.0550%" height="15" fill="rgb(209,121,21)" fg:x="5262" fg:w="3"/><text x="96.6943%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.09%)</title><rect x="97.0491%" y="69" width="0.0916%" height="15" fill="rgb(220,109,13)" fg:x="5295" fg:w="5"/><text x="97.2991%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.04%)</title><rect x="97.1408%" y="69" width="0.0367%" height="15" fill="rgb(232,18,1)" fg:x="5300" fg:w="2"/><text x="97.3908%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (54 samples, 0.99%)</title><rect x="96.4993%" y="101" width="0.9897%" height="15" fill="rgb(215,41,42)" fg:x="5265" fg:w="54"/><text x="96.7493%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (53 samples, 0.97%)</title><rect x="96.5176%" y="85" width="0.9714%" height="15" fill="rgb(224,123,36)" fg:x="5266" fg:w="53"/><text x="96.7676%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (17 samples, 0.31%)</title><rect x="97.1774%" y="69" width="0.3116%" height="15" fill="rgb(240,125,3)" fg:x="5302" fg:w="17"/><text x="97.4274%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.13%)</title><rect x="97.3607%" y="53" width="0.1283%" height="15" fill="rgb(205,98,50)" fg:x="5312" fg:w="7"/><text x="97.6107%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc (64 samples, 1.17%)</title><rect x="96.3343%" y="133" width="1.1730%" height="15" fill="rgb(205,185,37)" fg:x="5256" fg:w="64"/><text x="96.5843%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (61 samples, 1.12%)</title><rect x="96.3893%" y="117" width="1.1180%" height="15" fill="rgb(238,207,15)" fg:x="5259" fg:w="61"/><text x="96.6393%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="97.4890%" y="101" width="0.0183%" height="15" fill="rgb(213,199,42)" fg:x="5319" fg:w="1"/><text x="97.7390%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.02%)</title><rect x="97.5073%" y="133" width="0.0183%" height="15" fill="rgb(235,201,11)" fg:x="5320" fg:w="1"/><text x="97.7573%" y="143.50"></text></g><g><title>twinwidth`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (77 samples, 1.41%)</title><rect x="96.1694%" y="149" width="1.4113%" height="15" fill="rgb(207,46,11)" fg:x="5247" fg:w="77"/><text x="96.4194%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.05%)</title><rect x="97.5257%" y="133" width="0.0550%" height="15" fill="rgb(241,35,35)" fg:x="5321" fg:w="3"/><text x="97.7757%" y="143.50"></text></g><g><title>twinwidth`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="97.5806%" y="149" width="0.0183%" height="15" fill="rgb(243,32,47)" fg:x="5324" fg:w="1"/><text x="97.8306%" y="159.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (27 samples, 0.49%)</title><rect x="97.5990%" y="149" width="0.4949%" height="15" fill="rgb(247,202,23)" fg:x="5325" fg:w="27"/><text x="97.8490%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="98.5337%" y="117" width="0.0367%" height="15" fill="rgb(219,102,11)" fg:x="5376" fg:w="2"/><text x="98.7837%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="98.5521%" y="101" width="0.0183%" height="15" fill="rgb(243,110,44)" fg:x="5377" fg:w="1"/><text x="98.8021%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.15%)</title><rect x="98.5704%" y="117" width="0.1466%" height="15" fill="rgb(222,74,54)" fg:x="5378" fg:w="8"/><text x="98.8204%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.09%)</title><rect x="98.6254%" y="101" width="0.0916%" height="15" fill="rgb(216,99,12)" fg:x="5381" fg:w="5"/><text x="98.8754%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.05%)</title><rect x="98.6620%" y="85" width="0.0550%" height="15" fill="rgb(226,22,26)" fg:x="5383" fg:w="3"/><text x="98.9120%" y="95.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (37 samples, 0.68%)</title><rect x="98.0938%" y="149" width="0.6782%" height="15" fill="rgb(217,163,10)" fg:x="5352" fg:w="37"/><text x="98.3438%" y="159.50"></text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 0.35%)</title><rect x="98.4238%" y="133" width="0.3482%" height="15" fill="rgb(213,25,53)" fg:x="5370" fg:w="19"/><text x="98.6738%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.05%)</title><rect x="98.7170%" y="117" width="0.0550%" height="15" fill="rgb(252,105,26)" fg:x="5386" fg:w="3"/><text x="98.9670%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.05%)</title><rect x="98.7170%" y="101" width="0.0550%" height="15" fill="rgb(220,39,43)" fg:x="5386" fg:w="3"/><text x="98.9670%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="98.7353%" y="85" width="0.0367%" height="15" fill="rgb(229,68,48)" fg:x="5387" fg:w="2"/><text x="98.9853%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="98.7353%" y="69" width="0.0367%" height="15" fill="rgb(252,8,32)" fg:x="5387" fg:w="2"/><text x="98.9853%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="98.7537%" y="53" width="0.0183%" height="15" fill="rgb(223,20,43)" fg:x="5388" fg:w="1"/><text x="99.0037%" y="63.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (10 samples, 0.18%)</title><rect x="98.7720%" y="149" width="0.1833%" height="15" fill="rgb(229,81,49)" fg:x="5389" fg:w="10"/><text x="99.0220%" y="159.50"></text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (11 samples, 0.20%)</title><rect x="98.9553%" y="149" width="0.2016%" height="15" fill="rgb(236,28,36)" fg:x="5399" fg:w="11"/><text x="99.2053%" y="159.50"></text></g><g><title>twinwidth`&lt;twinwidth::algo::Greedy as twinwidth::algo::Algo&gt;::solve (5,405 samples, 99.07%)</title><rect x="0.1100%" y="181" width="99.0652%" height="15" fill="rgb(249,185,26)" fg:x="6" fg:w="5405"/><text x="0.3600%" y="191.50">twinwidth`&lt;twinwidth::algo::Greedy as twinwidth::algo::Algo&gt;::solve</text></g><g><title>twinwidth`twinwidth::graph::Graph::contract_nodes (424 samples, 7.77%)</title><rect x="91.4040%" y="165" width="7.7713%" height="15" fill="rgb(249,174,33)" fg:x="4987" fg:w="424"/><text x="91.6540%" y="175.50">twinwidth`t..</text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="99.1569%" y="149" width="0.0183%" height="15" fill="rgb(233,201,37)" fg:x="5410" fg:w="1"/><text x="99.4069%" y="159.50"></text></g><g><title>twinwidth`__rdl_dealloc (2 samples, 0.04%)</title><rect x="99.1752%" y="181" width="0.0367%" height="15" fill="rgb(221,78,26)" fg:x="5411" fg:w="2"/><text x="99.4252%" y="191.50"></text></g><g><title>twinwidth`core::slice::memchr::memchr_aligned (1 samples, 0.02%)</title><rect x="99.2119%" y="181" width="0.0183%" height="15" fill="rgb(250,127,30)" fg:x="5413" fg:w="1"/><text x="99.4619%" y="191.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.04%)</title><rect x="99.2302%" y="181" width="0.0367%" height="15" fill="rgb(230,49,44)" fg:x="5414" fg:w="2"/><text x="99.4802%" y="191.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.02%)</title><rect x="99.2669%" y="181" width="0.0183%" height="15" fill="rgb(229,67,23)" fg:x="5416" fg:w="1"/><text x="99.5169%" y="191.50"></text></g><g><title>twinwidth`std::fs::read_to_string::inner (1 samples, 0.02%)</title><rect x="99.2852%" y="181" width="0.0183%" height="15" fill="rgb(249,83,47)" fg:x="5417" fg:w="1"/><text x="99.5352%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="99.2852%" y="165" width="0.0183%" height="15" fill="rgb(215,43,3)" fg:x="5417" fg:w="1"/><text x="99.5352%" y="175.50"></text></g><g><title>twinwidth`twinwidth::graph::Graph::add_node (3 samples, 0.05%)</title><rect x="99.3035%" y="181" width="0.0550%" height="15" fill="rgb(238,154,13)" fg:x="5418" fg:w="3"/><text x="99.5535%" y="191.50"></text></g><g><title>twinwidth`twinwidth::graph::Graph::contract_nodes (2 samples, 0.04%)</title><rect x="99.3585%" y="181" width="0.0367%" height="15" fill="rgb(219,56,2)" fg:x="5421" fg:w="2"/><text x="99.6085%" y="191.50"></text></g><g><title>twinwidth`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.07%)</title><rect x="99.4135%" y="165" width="0.0733%" height="15" fill="rgb(233,0,4)" fg:x="5424" fg:w="4"/><text x="99.6635%" y="175.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.02%)</title><rect x="99.4868%" y="165" width="0.0183%" height="15" fill="rgb(235,30,7)" fg:x="5428" fg:w="1"/><text x="99.7368%" y="175.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.05%)</title><rect x="99.5051%" y="149" width="0.0550%" height="15" fill="rgb(250,79,13)" fg:x="5429" fg:w="3"/><text x="99.7551%" y="159.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (7 samples, 0.13%)</title><rect x="99.5601%" y="133" width="0.1283%" height="15" fill="rgb(211,146,34)" fg:x="5432" fg:w="7"/><text x="99.8101%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="99.9267%" y="101" width="0.0183%" height="15" fill="rgb(228,22,38)" fg:x="5452" fg:w="1"/><text x="100.1767%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="99.9267%" y="85" width="0.0183%" height="15" fill="rgb(235,168,5)" fg:x="5452" fg:w="1"/><text x="100.1767%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="99.9267%" y="69" width="0.0183%" height="15" fill="rgb(221,155,16)" fg:x="5452" fg:w="1"/><text x="100.1767%" y="79.50"></text></g><g><title>twinwidth`twinwidth::graph::Graph::add_edge (23 samples, 0.42%)</title><rect x="99.5601%" y="149" width="0.4216%" height="15" fill="rgb(215,215,53)" fg:x="5432" fg:w="23"/><text x="99.8101%" y="159.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 0.29%)</title><rect x="99.6884%" y="133" width="0.2933%" height="15" fill="rgb(223,4,10)" fg:x="5439" fg:w="16"/><text x="99.9384%" y="143.50"></text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.18%)</title><rect x="99.7984%" y="117" width="0.1833%" height="15" fill="rgb(234,103,6)" fg:x="5445" fg:w="10"/><text x="100.0484%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="99.9450%" y="101" width="0.0367%" height="15" fill="rgb(227,97,0)" fg:x="5453" fg:w="2"/><text x="100.1950%" y="111.50"></text></g><g><title>all (5,456 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="5456"/><text x="0.2500%" y="335.50"></text></g><g><title>twinwidth`0x1 (5,456 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="5456"/><text x="0.2500%" y="319.50">twinwidth`0x1</text></g><g><title>libdyld.dylib`start (5,456 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="5456"/><text x="0.2500%" y="303.50">libdyld.dylib`start</text></g><g><title>twinwidth`main (5,456 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="5456"/><text x="0.2500%" y="287.50">twinwidth`main</text></g><g><title>twinwidth`std::rt::lang_start_internal (5,456 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="5456"/><text x="0.2500%" y="271.50">twinwidth`std::rt::lang_start_internal</text></g><g><title>twinwidth`std::rt::lang_start::_{{closure}} (5,456 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="5456"/><text x="0.2500%" y="255.50">twinwidth`std::rt::lang_start::_{{closure}}</text></g><g><title>twinwidth`std::sys_common::backtrace::__rust_begin_short_backtrace (5,456 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="5456"/><text x="0.2500%" y="239.50">twinwidth`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>twinwidth`twinwidth::main (5,456 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="5456"/><text x="0.2500%" y="223.50">twinwidth`twinwidth::main</text></g><g><title>twinwidth`twinwidth::analyzer::Analyzer&lt;T&gt;::run (5,456 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="5456"/><text x="0.2500%" y="207.50">twinwidth`twinwidth::analyzer::Analyzer&lt;T&gt;::run</text></g><g><title>twinwidth`twinwidth::graph::Graph::from_gr (33 samples, 0.60%)</title><rect x="99.3952%" y="181" width="0.6048%" height="15" fill="rgb(224,130,29)" fg:x="5423" fg:w="33"/><text x="99.6452%" y="191.50"></text></g><g><title>twinwidth`twinwidth::graph::Graph::from_edges (27 samples, 0.49%)</title><rect x="99.5051%" y="165" width="0.4949%" height="15" fill="rgb(235,212,8)" fg:x="5429" fg:w="27"/><text x="99.7551%" y="175.50"></text></g><g><title>twinwidth`twinwidth::graph::Graph::add_node (1 samples, 0.02%)</title><rect x="99.9817%" y="149" width="0.0183%" height="15" fill="rgb(223,33,50)" fg:x="5455" fg:w="1"/><text x="100.2317%" y="159.50"></text></g></svg></svg>
<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="448591"><g><title>libdyld.dylib`tlv_get_addr (960 samples, 0.21%)</title><rect x="9.3071%" y="165" width="0.2140%" height="15" fill="rgb(227,0,7)" fg:x="41751" fg:w="960"/><text x="9.5571%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,260 samples, 0.28%)</title><rect x="9.5211%" y="165" width="0.2809%" height="15" fill="rgb(217,0,24)" fg:x="42711" fg:w="1260"/><text x="9.7711%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (74 samples, 0.02%)</title><rect x="9.8022%" y="165" width="0.0165%" height="15" fill="rgb(221,193,54)" fg:x="43972" fg:w="74"/><text x="10.0522%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (55 samples, 0.01%)</title><rect x="10.0067%" y="149" width="0.0123%" height="15" fill="rgb(248,212,6)" fg:x="44889" fg:w="55"/><text x="10.2567%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (943 samples, 0.21%)</title><rect x="9.8187%" y="165" width="0.2102%" height="15" fill="rgb(208,68,35)" fg:x="44046" fg:w="943"/><text x="10.0687%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (176 samples, 0.04%)</title><rect x="10.0290%" y="165" width="0.0392%" height="15" fill="rgb(232,128,0)" fg:x="44989" fg:w="176"/><text x="10.2790%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (163 samples, 0.04%)</title><rect x="10.0682%" y="165" width="0.0363%" height="15" fill="rgb(207,160,47)" fg:x="45165" fg:w="163"/><text x="10.3182%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (53 samples, 0.01%)</title><rect x="10.1045%" y="165" width="0.0118%" height="15" fill="rgb(228,23,34)" fg:x="45328" fg:w="53"/><text x="10.3545%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_for_pointer_no_lock (52 samples, 0.01%)</title><rect x="10.1163%" y="165" width="0.0116%" height="15" fill="rgb(218,30,26)" fg:x="45381" fg:w="52"/><text x="10.3663%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (170 samples, 0.04%)</title><rect x="10.1284%" y="165" width="0.0379%" height="15" fill="rgb(220,122,19)" fg:x="45435" fg:w="170"/><text x="10.3784%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1,330 samples, 0.30%)</title><rect x="10.1674%" y="165" width="0.2965%" height="15" fill="rgb(250,228,42)" fg:x="45610" fg:w="1330"/><text x="10.4174%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (581 samples, 0.13%)</title><rect x="10.4674%" y="165" width="0.1295%" height="15" fill="rgb(240,193,28)" fg:x="46956" fg:w="581"/><text x="10.7174%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (342 samples, 0.08%)</title><rect x="11.8244%" y="133" width="0.0762%" height="15" fill="rgb(216,20,37)" fg:x="53043" fg:w="342"/><text x="12.0744%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (724 samples, 0.16%)</title><rect x="12.2113%" y="117" width="0.1614%" height="15" fill="rgb(206,188,39)" fg:x="54779" fg:w="724"/><text x="12.4613%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (386 samples, 0.09%)</title><rect x="12.6385%" y="101" width="0.0860%" height="15" fill="rgb(217,207,13)" fg:x="56695" fg:w="386"/><text x="12.8885%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (203 samples, 0.05%)</title><rect x="12.6793%" y="85" width="0.0453%" height="15" fill="rgb(231,73,38)" fg:x="56878" fg:w="203"/><text x="12.9293%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (70 samples, 0.02%)</title><rect x="12.7089%" y="69" width="0.0156%" height="15" fill="rgb(225,20,46)" fg:x="57011" fg:w="70"/><text x="12.9589%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (189 samples, 0.04%)</title><rect x="12.7245%" y="101" width="0.0421%" height="15" fill="rgb(210,31,41)" fg:x="57081" fg:w="189"/><text x="12.9745%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2,780 samples, 0.62%)</title><rect x="16.7901%" y="85" width="0.6197%" height="15" fill="rgb(221,200,47)" fg:x="75319" fg:w="2780"/><text x="17.0401%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (31,015 samples, 6.91%)</title><rect x="12.3750%" y="117" width="6.9139%" height="15" fill="rgb(226,26,5)" fg:x="55513" fg:w="31015"/><text x="12.6250%" y="127.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29,258 samples, 6.52%)</title><rect x="12.7666%" y="101" width="6.5222%" height="15" fill="rgb(249,33,26)" fg:x="57270" fg:w="29258"/><text x="13.0166%" y="111.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8,407 samples, 1.87%)</title><rect x="17.4147%" y="85" width="1.8741%" height="15" fill="rgb(235,183,28)" fg:x="78121" fg:w="8407"/><text x="17.6647%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (638 samples, 0.14%)</title><rect x="19.1466%" y="69" width="0.1422%" height="15" fill="rgb(221,5,38)" fg:x="85890" fg:w="638"/><text x="19.3966%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (33,321 samples, 7.43%)</title><rect x="11.9006%" y="133" width="7.4279%" height="15" fill="rgb(247,18,42)" fg:x="53385" fg:w="33321"/><text x="12.1506%" y="143.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (178 samples, 0.04%)</title><rect x="19.2888%" y="117" width="0.0397%" height="15" fill="rgb(241,131,45)" fg:x="86528" fg:w="178"/><text x="19.5388%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (34,742 samples, 7.74%)</title><rect x="11.6699%" y="149" width="7.7447%" height="15" fill="rgb(249,31,29)" fg:x="52350" fg:w="34742"/><text x="11.9199%" y="159.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (356 samples, 0.08%)</title><rect x="19.3352%" y="133" width="0.0794%" height="15" fill="rgb(225,111,53)" fg:x="86736" fg:w="356"/><text x="19.5852%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (188 samples, 0.04%)</title><rect x="19.4146%" y="149" width="0.0419%" height="15" fill="rgb(238,160,17)" fg:x="87092" fg:w="188"/><text x="19.6646%" y="159.50"></text></g><g><title>twinwidth`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (42,651 samples, 9.51%)</title><rect x="10.6039%" y="165" width="9.5078%" height="15" fill="rgb(214,148,48)" fg:x="47568" fg:w="42651"/><text x="10.8539%" y="175.50">twinwidth`&lt;has..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,939 samples, 0.66%)</title><rect x="19.4565%" y="149" width="0.6552%" height="15" fill="rgb(232,36,49)" fg:x="87280" fg:w="2939"/><text x="19.7065%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2,142 samples, 0.48%)</title><rect x="20.9677%" y="149" width="0.4775%" height="15" fill="rgb(209,103,24)" fg:x="94059" fg:w="2142"/><text x="21.2177%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (101 samples, 0.02%)</title><rect x="22.5956%" y="133" width="0.0225%" height="15" fill="rgb(229,88,8)" fg:x="101362" fg:w="101"/><text x="22.8456%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9,385 samples, 2.09%)</title><rect x="22.6182%" y="133" width="2.0921%" height="15" fill="rgb(213,181,19)" fg:x="101463" fg:w="9385"/><text x="22.8682%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (8,367 samples, 1.87%)</title><rect x="22.8451%" y="117" width="1.8652%" height="15" fill="rgb(254,191,54)" fg:x="102481" fg:w="8367"/><text x="23.0951%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`free (15,262 samples, 3.40%)</title><rect x="21.4451%" y="149" width="3.4022%" height="15" fill="rgb(241,83,37)" fg:x="96201" fg:w="15262"/><text x="21.6951%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_size (615 samples, 0.14%)</title><rect x="24.7103%" y="133" width="0.1371%" height="15" fill="rgb(233,36,39)" fg:x="110848" fg:w="615"/><text x="24.9603%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (96 samples, 0.02%)</title><rect x="24.9067%" y="133" width="0.0214%" height="15" fill="rgb(226,3,54)" fg:x="111729" fg:w="96"/><text x="25.1567%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (491 samples, 0.11%)</title><rect x="24.8474%" y="149" width="0.1095%" height="15" fill="rgb(245,192,40)" fg:x="111463" fg:w="491"/><text x="25.0974%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (88 samples, 0.02%)</title><rect x="24.9372%" y="133" width="0.0196%" height="15" fill="rgb(238,167,29)" fg:x="111866" fg:w="88"/><text x="25.1872%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (358 samples, 0.08%)</title><rect x="29.2607%" y="133" width="0.0798%" height="15" fill="rgb(232,182,51)" fg:x="131261" fg:w="358"/><text x="29.5107%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (431 samples, 0.10%)</title><rect x="29.3405%" y="133" width="0.0961%" height="15" fill="rgb(231,60,39)" fg:x="131619" fg:w="431"/><text x="29.5905%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15,288 samples, 3.41%)</title><rect x="35.1182%" y="117" width="3.4080%" height="15" fill="rgb(208,69,12)" fg:x="157537" fg:w="15288"/><text x="35.3682%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`free_tiny (75,427 samples, 16.81%)</title><rect x="24.9568%" y="149" width="16.8142%" height="15" fill="rgb(235,93,37)" fg:x="111954" fg:w="75427"/><text x="25.2068%" y="159.50">libsystem_malloc.dylib`fre..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (55,331 samples, 12.33%)</title><rect x="29.4366%" y="133" width="12.3344%" height="15" fill="rgb(213,116,39)" fg:x="132050" fg:w="55331"/><text x="29.6866%" y="143.50">libsystem_malloc.d..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (14,556 samples, 3.24%)</title><rect x="38.5262%" y="117" width="3.2448%" height="15" fill="rgb(222,207,29)" fg:x="172825" fg:w="14556"/><text x="38.7762%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_size (418 samples, 0.09%)</title><rect x="41.7744%" y="149" width="0.0932%" height="15" fill="rgb(206,96,30)" fg:x="187396" fg:w="418"/><text x="42.0244%" y="159.50"></text></g><g><title>twinwidth`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (97,950 samples, 21.84%)</title><rect x="20.1116%" y="165" width="21.8350%" height="15" fill="rgb(218,138,4)" fg:x="90219" fg:w="97950"/><text x="20.3616%" y="175.50">twinwidth`&lt;hashbrown::raw::RawTable..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (355 samples, 0.08%)</title><rect x="41.8675%" y="149" width="0.0791%" height="15" fill="rgb(250,191,14)" fg:x="187814" fg:w="355"/><text x="42.1175%" y="159.50"></text></g><g><title>twinwidth`&lt;itertools::adaptors::Tuple2Combination&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.02%)</title><rect x="41.9467%" y="165" width="0.0176%" height="15" fill="rgb(239,60,40)" fg:x="188169" fg:w="79"/><text x="42.1967%" y="175.50"></text></g><g><title>twinwidth`__rdl_alloc (313 samples, 0.07%)</title><rect x="41.9748%" y="165" width="0.0698%" height="15" fill="rgb(206,27,48)" fg:x="188295" fg:w="313"/><text x="42.2248%" y="175.50"></text></g><g><title>twinwidth`__rdl_dealloc (653 samples, 0.15%)</title><rect x="42.0445%" y="165" width="0.1456%" height="15" fill="rgb(225,35,8)" fg:x="188608" fg:w="653"/><text x="42.2945%" y="175.50"></text></g><g><title>twinwidth`__rust_alloc (136 samples, 0.03%)</title><rect x="42.1901%" y="165" width="0.0303%" height="15" fill="rgb(250,213,24)" fg:x="189261" fg:w="136"/><text x="42.4401%" y="175.50"></text></g><g><title>twinwidth`__rust_dealloc (48 samples, 0.01%)</title><rect x="42.2204%" y="165" width="0.0107%" height="15" fill="rgb(247,123,22)" fg:x="189397" fg:w="48"/><text x="42.4704%" y="175.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (22,214 samples, 4.95%)</title><rect x="42.2311%" y="165" width="4.9519%" height="15" fill="rgb(231,138,38)" fg:x="189445" fg:w="22214"/><text x="42.4811%" y="175.50">twinwi..</text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (11,183 samples, 2.49%)</title><rect x="47.1831%" y="165" width="2.4929%" height="15" fill="rgb(231,145,46)" fg:x="211659" fg:w="11183"/><text x="47.4331%" y="175.50">tw..</text></g><g><title>libsystem_malloc.dylib`free (57 samples, 0.01%)</title><rect x="60.0429%" y="149" width="0.0127%" height="15" fill="rgb(251,118,11)" fg:x="269347" fg:w="57"/><text x="60.2929%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (310 samples, 0.07%)</title><rect x="60.0576%" y="149" width="0.0691%" height="15" fill="rgb(217,147,25)" fg:x="269413" fg:w="310"/><text x="60.3076%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (53 samples, 0.01%)</title><rect x="60.1267%" y="149" width="0.0118%" height="15" fill="rgb(247,81,37)" fg:x="269723" fg:w="53"/><text x="60.3767%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (251 samples, 0.06%)</title><rect x="60.1445%" y="149" width="0.0560%" height="15" fill="rgb(209,12,38)" fg:x="269803" fg:w="251"/><text x="60.3945%" y="159.50"></text></g><g><title>twinwidth`__rdl_alloc (361 samples, 0.08%)</title><rect x="60.2058%" y="149" width="0.0805%" height="15" fill="rgb(227,1,9)" fg:x="270078" fg:w="361"/><text x="60.4558%" y="159.50"></text></g><g><title>twinwidth`__rust_alloc (168 samples, 0.04%)</title><rect x="60.2939%" y="149" width="0.0375%" height="15" fill="rgb(248,47,43)" fg:x="270473" fg:w="168"/><text x="60.5439%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (120 samples, 0.03%)</title><rect x="68.0442%" y="133" width="0.0268%" height="15" fill="rgb(221,10,30)" fg:x="305240" fg:w="120"/><text x="68.2942%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (86 samples, 0.02%)</title><rect x="68.1552%" y="117" width="0.0192%" height="15" fill="rgb(210,229,1)" fg:x="305738" fg:w="86"/><text x="68.4052%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (674 samples, 0.15%)</title><rect x="68.1744%" y="117" width="0.1502%" height="15" fill="rgb(222,148,37)" fg:x="305824" fg:w="674"/><text x="68.4244%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (613 samples, 0.14%)</title><rect x="68.1879%" y="101" width="0.1367%" height="15" fill="rgb(234,67,33)" fg:x="305885" fg:w="613"/><text x="68.4379%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (1,157 samples, 0.26%)</title><rect x="68.0709%" y="133" width="0.2579%" height="15" fill="rgb(247,98,35)" fg:x="305360" fg:w="1157"/><text x="68.3209%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (69 samples, 0.02%)</title><rect x="68.3803%" y="117" width="0.0154%" height="15" fill="rgb(247,138,52)" fg:x="306748" fg:w="69"/><text x="68.6303%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (393 samples, 0.09%)</title><rect x="68.3288%" y="133" width="0.0876%" height="15" fill="rgb(213,79,30)" fg:x="306517" fg:w="393"/><text x="68.5788%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (68 samples, 0.02%)</title><rect x="68.4013%" y="117" width="0.0152%" height="15" fill="rgb(246,177,23)" fg:x="306842" fg:w="68"/><text x="68.6513%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (452 samples, 0.10%)</title><rect x="68.7836%" y="101" width="0.1008%" height="15" fill="rgb(230,62,27)" fg:x="308557" fg:w="452"/><text x="69.0336%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,281 samples, 0.51%)</title><rect x="68.4164%" y="133" width="0.5085%" height="15" fill="rgb(216,154,8)" fg:x="306910" fg:w="2281"/><text x="68.6664%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,474 samples, 0.33%)</title><rect x="68.5963%" y="117" width="0.3286%" height="15" fill="rgb(244,35,45)" fg:x="307717" fg:w="1474"/><text x="68.8463%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (182 samples, 0.04%)</title><rect x="68.8844%" y="101" width="0.0406%" height="15" fill="rgb(251,115,12)" fg:x="309009" fg:w="182"/><text x="69.1344%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (385 samples, 0.09%)</title><rect x="69.1318%" y="117" width="0.0858%" height="15" fill="rgb(240,54,50)" fg:x="310119" fg:w="385"/><text x="69.3818%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1,204 samples, 0.27%)</title><rect x="69.6053%" y="101" width="0.2684%" height="15" fill="rgb(233,84,52)" fg:x="312243" fg:w="1204"/><text x="69.8553%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (106 samples, 0.02%)</title><rect x="70.3391%" y="53" width="0.0236%" height="15" fill="rgb(207,117,47)" fg:x="315535" fg:w="106"/><text x="70.5891%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (84 samples, 0.02%)</title><rect x="70.3628%" y="53" width="0.0187%" height="15" fill="rgb(249,43,39)" fg:x="315641" fg:w="84"/><text x="70.6128%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1,080 samples, 0.24%)</title><rect x="70.2018%" y="85" width="0.2408%" height="15" fill="rgb(209,38,44)" fg:x="314919" fg:w="1080"/><text x="70.4518%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (651 samples, 0.15%)</title><rect x="70.2974%" y="69" width="0.1451%" height="15" fill="rgb(236,212,23)" fg:x="315348" fg:w="651"/><text x="70.5474%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (274 samples, 0.06%)</title><rect x="70.3815%" y="53" width="0.0611%" height="15" fill="rgb(242,79,21)" fg:x="315725" fg:w="274"/><text x="70.6315%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (171 samples, 0.04%)</title><rect x="70.4426%" y="85" width="0.0381%" height="15" fill="rgb(211,96,35)" fg:x="315999" fg:w="171"/><text x="70.6926%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3,596 samples, 0.80%)</title><rect x="74.7050%" y="69" width="0.8016%" height="15" fill="rgb(253,215,40)" fg:x="335120" fg:w="3596"/><text x="74.9550%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (92 samples, 0.02%)</title><rect x="75.5066%" y="69" width="0.0205%" height="15" fill="rgb(211,81,21)" fg:x="338716" fg:w="92"/><text x="75.7566%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36,010 samples, 8.03%)</title><rect x="69.8770%" y="101" width="8.0274%" height="15" fill="rgb(208,190,38)" fg:x="313462" fg:w="36010"/><text x="70.1270%" y="111.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (33,302 samples, 7.42%)</title><rect x="70.4807%" y="85" width="7.4237%" height="15" fill="rgb(235,213,38)" fg:x="316170" fg:w="33302"/><text x="70.7307%" y="95.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10,664 samples, 2.38%)</title><rect x="75.5272%" y="69" width="2.3772%" height="15" fill="rgb(237,122,38)" fg:x="338808" fg:w="10664"/><text x="75.7772%" y="79.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1,855 samples, 0.41%)</title><rect x="77.4909%" y="53" width="0.4135%" height="15" fill="rgb(244,218,35)" fg:x="347617" fg:w="1855"/><text x="77.7409%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (39,164 samples, 8.73%)</title><rect x="69.2176%" y="117" width="8.7304%" height="15" fill="rgb(240,68,47)" fg:x="310504" fg:w="39164"/><text x="69.4676%" y="127.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (196 samples, 0.04%)</title><rect x="77.9044%" y="101" width="0.0437%" height="15" fill="rgb(210,16,53)" fg:x="349472" fg:w="196"/><text x="78.1544%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (41,414 samples, 9.23%)</title><rect x="68.9249%" y="133" width="9.2320%" height="15" fill="rgb(235,124,12)" fg:x="309191" fg:w="41414"/><text x="69.1749%" y="143.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (924 samples, 0.21%)</title><rect x="77.9510%" y="117" width="0.2060%" height="15" fill="rgb(224,169,11)" fg:x="349681" fg:w="924"/><text x="78.2010%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (215 samples, 0.05%)</title><rect x="78.1569%" y="133" width="0.0479%" height="15" fill="rgb(250,166,2)" fg:x="350605" fg:w="215"/><text x="78.4069%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1,312 samples, 0.29%)</title><rect x="78.2142%" y="133" width="0.2925%" height="15" fill="rgb(242,216,29)" fg:x="350862" fg:w="1312"/><text x="78.4642%" y="143.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (129,881 samples, 28.95%)</title><rect x="49.6760%" y="165" width="28.9531%" height="15" fill="rgb(230,116,27)" fg:x="222842" fg:w="129881"/><text x="49.9260%" y="175.50">twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::ins..</text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (82,080 samples, 18.30%)</title><rect x="60.3318%" y="149" width="18.2973%" height="15" fill="rgb(228,99,48)" fg:x="270643" fg:w="82080"/><text x="60.5818%" y="159.50">twinwidth`hashbrown::raw::Raw..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (549 samples, 0.12%)</title><rect x="78.5067%" y="133" width="0.1224%" height="15" fill="rgb(253,11,6)" fg:x="352174" fg:w="549"/><text x="78.7567%" y="143.50"></text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (146 samples, 0.03%)</title><rect x="78.6293%" y="165" width="0.0325%" height="15" fill="rgb(247,143,39)" fg:x="352724" fg:w="146"/><text x="78.8793%" y="175.50"></text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (372 samples, 0.08%)</title><rect x="78.6619%" y="165" width="0.0829%" height="15" fill="rgb(236,97,10)" fg:x="352870" fg:w="372"/><text x="78.9119%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (48 samples, 0.01%)</title><rect x="86.8317%" y="101" width="0.0107%" height="15" fill="rgb(233,208,19)" fg:x="389519" fg:w="48"/><text x="87.0817%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (74 samples, 0.02%)</title><rect x="86.8424%" y="101" width="0.0165%" height="15" fill="rgb(216,164,2)" fg:x="389567" fg:w="74"/><text x="87.0924%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (64 samples, 0.01%)</title><rect x="86.8446%" y="85" width="0.0143%" height="15" fill="rgb(220,129,5)" fg:x="389577" fg:w="64"/><text x="87.0946%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (178 samples, 0.04%)</title><rect x="86.8198%" y="117" width="0.0397%" height="15" fill="rgb(242,17,10)" fg:x="389466" fg:w="178"/><text x="87.0698%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (62 samples, 0.01%)</title><rect x="86.8903%" y="101" width="0.0138%" height="15" fill="rgb(242,107,0)" fg:x="389782" fg:w="62"/><text x="87.1403%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (291 samples, 0.06%)</title><rect x="86.8595%" y="117" width="0.0649%" height="15" fill="rgb(251,28,31)" fg:x="389644" fg:w="291"/><text x="87.1095%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (52 samples, 0.01%)</title><rect x="86.9128%" y="101" width="0.0116%" height="15" fill="rgb(233,223,10)" fg:x="389883" fg:w="52"/><text x="87.1628%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (109 samples, 0.02%)</title><rect x="86.9244%" y="117" width="0.0243%" height="15" fill="rgb(215,21,27)" fg:x="389935" fg:w="109"/><text x="87.1744%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (80 samples, 0.02%)</title><rect x="86.9309%" y="101" width="0.0178%" height="15" fill="rgb(232,23,21)" fg:x="389964" fg:w="80"/><text x="87.1809%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (107 samples, 0.02%)</title><rect x="86.9768%" y="69" width="0.0239%" height="15" fill="rgb(244,5,23)" fg:x="390170" fg:w="107"/><text x="87.2268%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (54 samples, 0.01%)</title><rect x="87.0376%" y="37" width="0.0120%" height="15" fill="rgb(226,81,46)" fg:x="390443" fg:w="54"/><text x="87.2876%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (283 samples, 0.06%)</title><rect x="87.0006%" y="69" width="0.0631%" height="15" fill="rgb(247,70,30)" fg:x="390277" fg:w="283"/><text x="87.2506%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (179 samples, 0.04%)</title><rect x="87.0238%" y="53" width="0.0399%" height="15" fill="rgb(212,68,19)" fg:x="390381" fg:w="179"/><text x="87.2738%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (637 samples, 0.14%)</title><rect x="86.9509%" y="101" width="0.1420%" height="15" fill="rgb(240,187,13)" fg:x="390054" fg:w="637"/><text x="87.2009%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (586 samples, 0.13%)</title><rect x="86.9623%" y="85" width="0.1306%" height="15" fill="rgb(223,113,26)" fg:x="390105" fg:w="586"/><text x="87.2123%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (129 samples, 0.03%)</title><rect x="87.0642%" y="69" width="0.0288%" height="15" fill="rgb(206,192,2)" fg:x="390562" fg:w="129"/><text x="87.3142%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc (651 samples, 0.15%)</title><rect x="86.9487%" y="117" width="0.1451%" height="15" fill="rgb(241,108,4)" fg:x="390044" fg:w="651"/><text x="87.1987%" y="127.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (25,406 samples, 5.66%)</title><rect x="81.4490%" y="149" width="5.6635%" height="15" fill="rgb(247,173,49)" fg:x="365373" fg:w="25406"/><text x="81.6990%" y="159.50">twinwid..</text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13,217 samples, 2.95%)</title><rect x="84.1662%" y="133" width="2.9463%" height="15" fill="rgb(224,114,35)" fg:x="377562" fg:w="13217"/><text x="84.4162%" y="143.50">tw..</text></g><g><title>twinwidth`twinwidth::graph::Graph::add_node (37,563 samples, 8.37%)</title><rect x="78.7461%" y="165" width="8.3736%" height="15" fill="rgb(245,159,27)" fg:x="353248" fg:w="37563"/><text x="78.9961%" y="175.50">twinwidth`tw..</text></g><g><title>libsystem_malloc.dylib`small_size (73 samples, 0.02%)</title><rect x="88.3696%" y="133" width="0.0163%" height="15" fill="rgb(245,172,44)" fg:x="396418" fg:w="73"/><text x="88.6196%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (87 samples, 0.02%)</title><rect x="88.3859%" y="133" width="0.0194%" height="15" fill="rgb(236,23,11)" fg:x="396491" fg:w="87"/><text x="88.6359%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (66 samples, 0.01%)</title><rect x="88.3905%" y="117" width="0.0147%" height="15" fill="rgb(205,117,38)" fg:x="396512" fg:w="66"/><text x="88.6405%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (252 samples, 0.06%)</title><rect x="88.3500%" y="149" width="0.0562%" height="15" fill="rgb(237,72,25)" fg:x="396330" fg:w="252"/><text x="88.6000%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (145 samples, 0.03%)</title><rect x="88.4692%" y="133" width="0.0323%" height="15" fill="rgb(244,70,9)" fg:x="396865" fg:w="145"/><text x="88.7192%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (449 samples, 0.10%)</title><rect x="88.4061%" y="149" width="0.1001%" height="15" fill="rgb(217,125,39)" fg:x="396582" fg:w="449"/><text x="88.6561%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (71 samples, 0.02%)</title><rect x="88.5062%" y="149" width="0.0158%" height="15" fill="rgb(235,36,10)" fg:x="397031" fg:w="71"/><text x="88.7562%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (47 samples, 0.01%)</title><rect x="88.5116%" y="133" width="0.0105%" height="15" fill="rgb(251,123,47)" fg:x="397055" fg:w="47"/><text x="88.7616%" y="143.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3,148 samples, 0.70%)</title><rect x="88.9920%" y="133" width="0.7018%" height="15" fill="rgb(221,13,13)" fg:x="399210" fg:w="3148"/><text x="89.2420%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (68 samples, 0.02%)</title><rect x="93.4600%" y="101" width="0.0152%" height="15" fill="rgb(238,131,9)" fg:x="419253" fg:w="68"/><text x="93.7100%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (111 samples, 0.02%)</title><rect x="93.4751%" y="101" width="0.0247%" height="15" fill="rgb(211,50,8)" fg:x="419321" fg:w="111"/><text x="93.7251%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (154 samples, 0.03%)</title><rect x="93.4999%" y="101" width="0.0343%" height="15" fill="rgb(245,182,24)" fg:x="419432" fg:w="154"/><text x="93.7499%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (147 samples, 0.03%)</title><rect x="93.5014%" y="85" width="0.0328%" height="15" fill="rgb(242,14,37)" fg:x="419439" fg:w="147"/><text x="93.7514%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (135 samples, 0.03%)</title><rect x="93.5041%" y="69" width="0.0301%" height="15" fill="rgb(246,228,12)" fg:x="419451" fg:w="135"/><text x="93.7541%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (128 samples, 0.03%)</title><rect x="93.5057%" y="53" width="0.0285%" height="15" fill="rgb(213,55,15)" fg:x="419458" fg:w="128"/><text x="93.7557%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (75 samples, 0.02%)</title><rect x="93.5175%" y="37" width="0.0167%" height="15" fill="rgb(209,9,3)" fg:x="419511" fg:w="75"/><text x="93.7675%" y="47.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17,259 samples, 3.85%)</title><rect x="89.6937%" y="133" width="3.8474%" height="15" fill="rgb(230,59,30)" fg:x="402358" fg:w="17259"/><text x="89.9437%" y="143.50">twin..</text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4,898 samples, 1.09%)</title><rect x="92.4492%" y="117" width="1.0919%" height="15" fill="rgb(209,121,21)" fg:x="414719" fg:w="4898"/><text x="92.6992%" y="127.50"></text></g><g><title>twinwidth`&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22,477 samples, 5.01%)</title><rect x="88.5314%" y="149" width="5.0106%" height="15" fill="rgb(220,109,13)" fg:x="397144" fg:w="22477"/><text x="88.7814%" y="159.50">twinwi..</text></g><g><title>libsystem_malloc.dylib`malloc (193 samples, 0.04%)</title><rect x="93.5556%" y="117" width="0.0430%" height="15" fill="rgb(232,18,1)" fg:x="419682" fg:w="193"/><text x="93.8056%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (191 samples, 0.04%)</title><rect x="93.5560%" y="101" width="0.0426%" height="15" fill="rgb(215,41,42)" fg:x="419684" fg:w="191"/><text x="93.8060%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (175 samples, 0.04%)</title><rect x="93.5596%" y="85" width="0.0390%" height="15" fill="rgb(224,123,36)" fg:x="419700" fg:w="175"/><text x="93.8096%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (169 samples, 0.04%)</title><rect x="93.5609%" y="69" width="0.0377%" height="15" fill="rgb(240,125,3)" fg:x="419706" fg:w="169"/><text x="93.8109%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (95 samples, 0.02%)</title><rect x="93.5774%" y="53" width="0.0212%" height="15" fill="rgb(205,98,50)" fg:x="419780" fg:w="95"/><text x="93.8274%" y="63.50"></text></g><g><title>twinwidth`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (277 samples, 0.06%)</title><rect x="93.5420%" y="149" width="0.0617%" height="15" fill="rgb(205,185,37)" fg:x="419621" fg:w="277"/><text x="93.7920%" y="159.50"></text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (261 samples, 0.06%)</title><rect x="93.5456%" y="133" width="0.0582%" height="15" fill="rgb(238,207,15)" fg:x="419637" fg:w="261"/><text x="93.7956%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (298 samples, 0.07%)</title><rect x="93.6227%" y="85" width="0.0664%" height="15" fill="rgb(213,199,42)" fg:x="419983" fg:w="298"/><text x="93.8727%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (151 samples, 0.03%)</title><rect x="93.6555%" y="69" width="0.0337%" height="15" fill="rgb(235,201,11)" fg:x="420130" fg:w="151"/><text x="93.9055%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (77 samples, 0.02%)</title><rect x="93.6720%" y="53" width="0.0172%" height="15" fill="rgb(207,46,11)" fg:x="420204" fg:w="77"/><text x="93.9220%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (349 samples, 0.08%)</title><rect x="93.6185%" y="101" width="0.0778%" height="15" fill="rgb(241,35,35)" fg:x="419964" fg:w="349"/><text x="93.8685%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (366 samples, 0.08%)</title><rect x="93.6149%" y="117" width="0.0816%" height="15" fill="rgb(243,32,47)" fg:x="419948" fg:w="366"/><text x="93.8649%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (376 samples, 0.08%)</title><rect x="93.6131%" y="133" width="0.0838%" height="15" fill="rgb(247,202,23)" fg:x="419940" fg:w="376"/><text x="93.8631%" y="143.50"></text></g><g><title>twinwidth`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (639 samples, 0.14%)</title><rect x="93.6038%" y="149" width="0.1424%" height="15" fill="rgb(219,102,11)" fg:x="419898" fg:w="639"/><text x="93.8538%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (220 samples, 0.05%)</title><rect x="93.6972%" y="133" width="0.0490%" height="15" fill="rgb(243,110,44)" fg:x="420317" fg:w="220"/><text x="93.9472%" y="143.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (17,478 samples, 3.90%)</title><rect x="93.7482%" y="149" width="3.8962%" height="15" fill="rgb(222,74,54)" fg:x="420546" fg:w="17478"/><text x="93.9982%" y="159.50">twin..</text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4,280 samples, 0.95%)</title><rect x="97.6444%" y="149" width="0.9541%" height="15" fill="rgb(216,99,12)" fg:x="438024" fg:w="4280"/><text x="97.8944%" y="159.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (73 samples, 0.02%)</title><rect x="98.5985%" y="149" width="0.0163%" height="15" fill="rgb(226,22,26)" fg:x="442304" fg:w="73"/><text x="98.8485%" y="159.50"></text></g><g><title>twinwidth`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (3,874 samples, 0.86%)</title><rect x="98.6148%" y="149" width="0.8636%" height="15" fill="rgb(217,163,10)" fg:x="442377" fg:w="3874"/><text x="98.8648%" y="159.50"></text></g><g><title>twinwidth`&lt;twinwidth::algo::Greedy as twinwidth::algo::Algo&gt;::solve (446,205 samples, 99.47%)</title><rect x="0.0105%" y="181" width="99.4681%" height="15" fill="rgb(213,25,53)" fg:x="47" fg:w="446205"/><text x="0.2605%" y="191.50">twinwidth`&lt;twinwidth::algo::Greedy as twinwidth::algo::Algo&gt;::solve</text></g><g><title>twinwidth`twinwidth::graph::Graph::contract_nodes (55,441 samples, 12.36%)</title><rect x="87.1197%" y="165" width="12.3589%" height="15" fill="rgb(252,105,26)" fg:x="390811" fg:w="55441"/><text x="87.3697%" y="175.50">twinwidth`twinwidt..</text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (536 samples, 0.12%)</title><rect x="99.4839%" y="181" width="0.1195%" height="15" fill="rgb(220,39,43)" fg:x="446276" fg:w="536"/><text x="99.7339%" y="191.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (538 samples, 0.12%)</title><rect x="99.6034%" y="181" width="0.1199%" height="15" fill="rgb(229,68,48)" fg:x="446812" fg:w="538"/><text x="99.8534%" y="191.50"></text></g><g><title>twinwidth`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (928 samples, 0.21%)</title><rect x="99.7234%" y="181" width="0.2069%" height="15" fill="rgb(252,8,32)" fg:x="447350" fg:w="928"/><text x="99.9734%" y="191.50"></text></g><g><title>twinwidth`twinwidth::graph::Graph::add_node (252 samples, 0.06%)</title><rect x="99.9304%" y="181" width="0.0562%" height="15" fill="rgb(223,20,43)" fg:x="448279" fg:w="252"/><text x="100.1804%" y="191.50"></text></g><g><title>all (448,591 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="448591"/><text x="0.2500%" y="335.50"></text></g><g><title>twinwidth`0x1 (448,591 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="448591"/><text x="0.2500%" y="319.50">twinwidth`0x1</text></g><g><title>libdyld.dylib`start (448,591 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="448591"/><text x="0.2500%" y="303.50">libdyld.dylib`start</text></g><g><title>twinwidth`main (448,591 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="448591"/><text x="0.2500%" y="287.50">twinwidth`main</text></g><g><title>twinwidth`std::rt::lang_start_internal (448,591 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="448591"/><text x="0.2500%" y="271.50">twinwidth`std::rt::lang_start_internal</text></g><g><title>twinwidth`std::rt::lang_start::_{{closure}} (448,591 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="448591"/><text x="0.2500%" y="255.50">twinwidth`std::rt::lang_start::_{{closure}}</text></g><g><title>twinwidth`std::sys_common::backtrace::__rust_begin_short_backtrace (448,591 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="448591"/><text x="0.2500%" y="239.50">twinwidth`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>twinwidth`twinwidth::main (448,591 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="448591"/><text x="0.2500%" y="223.50">twinwidth`twinwidth::main</text></g><g><title>twinwidth`twinwidth::analyzer::Analyzer&lt;T&gt;::run (448,591 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="448591"/><text x="0.2500%" y="207.50">twinwidth`twinwidth::analyzer::Analyzer&lt;T&gt;::run</text></g><g><title>twinwidth`twinwidth::graph::Graph::from_gr (48 samples, 0.01%)</title><rect x="99.9893%" y="181" width="0.0107%" height="15" fill="rgb(249,83,47)" fg:x="448543" fg:w="48"/><text x="100.2393%" y="191.50"></text></g></svg></svg>